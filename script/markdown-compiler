#!/usr/bin/env perl
use warnings;
use strict;
use oCLI::Command;
use oCLI 'oCLI::Plugin::Validate';
use Markdown::Compiler;
use File::Slurper qw( read_text );
use Data::Dumper;


my $markdown_filespec = [ [ sub { -e $_[2] || die "$_[2]: $!\n"; $_[2] } ], { name => "File Name", desc => "Markdown file to compile" } ];

define lexer => (
    validate => [
        0 => $markdown_filespec,
    ],
    code => sub {
        my ( $self, $c ) = @_;

        my $file = $c->req->args->[0];

        $c->stash->{markdown} = Markdown::Compiler->new(source => read_text($file));

        $c->stash->{text} = Dumper($c->stash->{markdown}->stream);
    }
);

define parser => (
    validate => [
        0 => $markdown_filespec,
    ],
    code => sub {
        my ( $self, $c ) = @_;

        my $file = $c->req->args->[0];

        $c->stash->{markdown} = Markdown::Compiler->new(source => read_text($file));

        $c->stash->{text} = Dumper($c->stash->{markdown}->tree);
    }
);

define compiler => (
    validate => [
        0      => $markdown_filespec,
        target => [ [ qw( def=HTML ) ], { desc => "The name of the compiler target. Default: HTML" } ]
    ],
    code => sub {
        my ( $self, $c ) = @_;

        my $file = $c->req->args->[0];

        $c->stash->{markdown} = Markdown::Compiler->new(source => read_text($file));

        $c->stash->{text} = $c->stash->{markdown}->compiler_for($c->req->settings->{target})->html;
    }
);


oCLI->new( root => 'main', render_root => 'oCLI' )->run( @ARGV );
